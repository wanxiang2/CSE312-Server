from util.request import Request

class Part:
    def __init__(self) -> None:
        self.headers: dict[str, str] = {}
        self.name: str = ""
        self.content: bytes = b""


class MultiPart:
    def __init__(self):
        self.boundary: str = ""
        self.parts: list[Part] = []


def parse_multipart(request):

    # print("\n\nThis is the avatar body!\n\n")
    # print(request.body)

    # Getting the boundary from the Content-Type header of multipart.
    content_type_header = request.headers.get("Content-Type").split(";")

    my_boundary = ""
    for section in content_type_header:
        if section.strip().lower().startswith("boundary="):
            my_boundary = section.lstrip().removeprefix("boundary=")
            break

    my_multipart = MultiPart()
    my_multipart.boundary = my_boundary

    split_boundary = "\r\n" + "--" + my_boundary
    split_boundary = split_boundary.encode()

    # Remove the first boundary which should be at the start of the body and doesn't have a CRLF.
    multipart_body = request.body.removeprefix(b"--" + my_boundary.encode())

    # Split all the parts by boundary.
    parts = multipart_body.split(split_boundary)

    # print("\n\n Printing Parts!\n\n")
    # print(str(parts))
    # print(repr(my_multipart.boundary))

    # Remove the last index from the list because it contains -- and maybe some other random values.
    parts = parts[:-1]

    for part in parts:
        # We split on the boundaries, which removed the boundaries. But many boundaries have a CRLF after it.
        part = part.removeprefix(b"\r\n")
        # I am using my Request class. So I need to add an extra line that is not important.
        # This is because Request will remove the first line as the request line and it
        # will not be included in the header.
        sample_request_line = b"SAMPLE request line\r\n"
        part_request = Request(sample_request_line + part)

        my_part = Part()
        my_part.headers = part_request.headers

        content_disposition_header = part_request.headers.get("Content-Disposition")

        if content_disposition_header:

            print("\n\n1\n\n")

            for my_name in content_disposition_header.split(";"):
                if my_name.lstrip().lower().startswith("name="):
                    my_part.name = my_name.lstrip().removeprefix("name=").removeprefix('"').removesuffix('"')
                    break

        my_part.content = part_request.body

        my_multipart.parts.append(my_part)

    return my_multipart




def test1():

    request_bytes = b'POST /upload HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate, br, zstd\r\nContent-Type: multipart/form-data; boundary=----geckoformboundary5be43027cc2302278ce53c22c7486ff1\r\nContent-Length: 2313\r\nOrigin: null\r\nConnection: keep-alive\r\nUpgrade-Insecure-Requests: 1\r\nSec-Fetch-Dest: document\r\nSec-Fetch-Mode: navigate\r\nSec-Fetch-Site: cross-site\r\nSec-Fetch-User: ?1\r\nPriority: u=0, i\r\n\r\n------geckoformboundary5be43027cc2302278ce53c22c7486ff1\r\nContent-Disposition: form-data; name="description"\r\n\r\nHi it\'s me.\r\n------geckoformboundary5be43027cc2302278ce53c22c7486ff1\r\nContent-Disposition: form-data; name="uploaded-file"; filename="tiny_image.jpg"\r\nContent-Type: image/jpeg\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00x\x00x\x00\x00\xff\xdb\x00C\x00\x03\x02\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\n\x07\x07\x06\x08\x0c\n\x0c\x0c\x0b\n\x0b\x0b\r\x0e\x12\x10\r\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00C\x01\x03\x04\x04\x05\x04\x05\t\x05\x05\t\x14\r\x0b\r\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc0\x00\x11\x08\x00H\x00H\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf2\xad*v\x92\xe9T1\x19=\xab\xe9\xcf\x85z\'\x93\xe1\xb3\xa9\xeaR\x08\xe1\x1c)~\x0bz`u5\xf2\xc6\x88\xcc\xf7\xf1\x81\xc0\'\x02\xbe\xb2\xb0\xb4\x9f\xfe\x11_\x0f\xdaI\xb8\x8f#\xcc9>\xa4\xe3\xf4\xaf\xc9\xb0t\xd3\x93\xb9\xe5\xf0\xe6\x16\x9e"\xabu\x15\xecn?\x884\xb9\x90\xa2X\xb3\x7f\xc0\xbfZ~\x9a\xdaW\xdb\x12h\x8b!?x8\xe4\xfe5^\xdfFX\xb1\x95\xc7\xbdI-\x87\x97\xc0\\\x802\x0fz\xf6}\x92h\xfb\xea\xf9n\x16\xb2\xe5\x9c\x11\xdb_j\xd6gJ\x91P+\x1d\x9d}y5\xf2\x1f\xc5\xc9\x95\xb5\x99\x158\x1b\xb9\xaf\xa1\x04o</\x039L\xe7\x0c\x0fQ^\x1d\xf1C\xc2wq^\x97t\xc8nRA\xd1\xab\xcd\xadI\xc5;\x1f\x9d\xe6Y%L\x13u)\xeb\x0f\xcb\xd4\xf2[\x85f\\(\xac\xf1\xe0\xdb\x9dbPJ\x9d\x8d]\xbe\x83\xe1\xc7\xb9w3\xfc\xa0\x1e\x86\xbd\x1b\xc3\xdaM\xa41\x81\xb0q\x9eH\xa3\x0c\x9c=\xe3\xe6\xe2\xac\xeeyV\x95\xf0u\x9a \xd2\'\xcaGqE{D\xba\x9d\xad\x8c\'s\xa8\xf4\xcd\x15\xe89\xcd\xbb\x9b\xf33\xc6t\x9d\x0c\xf9\xd1>va\x81\x06\xbe\xb8\xb7\xb62\xdc\xd8\x05;\xe3[XUF{l\x19\xfdk\xc9\xbc\'\xe0\xf8\xee\xc0&<\x8fB+\xdeWO\x1ay\xd3F0\x16\xd61\x8flW6\x1a\x1c\xa9\x9fg\xc2\xb2J\xa5H\xf9 0\x0cm#\x91\xd7\xb5\x13\xd9\xa3.B\xfe\x15u\xc4l7\x0e\x87\xb3v\xa4HF\xd023\xf5\xafN\x0c\xfd\x0eh\xe7\xae\xec\x00\x04\xed\xc6{\xd6]\xfd\xad\xb5\xfd\xa3\xd8\xde x\xdb\xa3w\x07\xd4Wcwj\xa5H\'+\xdb\x02\xb9\xddB\xd4\xdb\x92pH\xeb\x93J\xa4\x132j3N\x13Z\x1e-\xe3o\x0bO\xe1H\x1a\xee5\x12[n\x1f:\x0e\x83\x9e\xb5\xe6z\xbf\xc4\xd5\xd2\xac\xa5)!\x0f\xb3?\x99\xaf\xa9\x99\xe1\xbc\xb6\x96\xca\xea\x05\x9a\xde@\x01\x0e3\x91_.\xfck\xfd\x9f\xf5\x1d\x16+\xab\xed&6\xbb\xb0\x95\x81DPKG\x8e\x80\xfb\x0c\x9a\xc2\x10\x8d\xec|.e\x92(7V\x86\xdd\x8f)\xd5\xfe(_\xdf\xef\xc4\x8c7p\x0eh\xaef\xe7K\x9d&\x86\x17\x88\xae\xd5\x00\xf1\xde\x8a\xebq\x8ct>Y\xd2\xe5v\xb1\xfa?\xe0-,E\x18\xde\xa0\x1cW\xa0x\x9e\xdc\xc64\xc9\xa3\x1f\xba\x16\xe1s\xeay\xaf\x1a\xb3\xf1\xfczt9.\xa3\x8e9\xafY\xd2\xb5h\xfcW\xf0\xdbL\xd4\xa2}\xdb$\x923\x83\x9c`\xd7\x9b\x86nw=\x8e\x17\x9b\x86.Q}Q\x996\xa2\x88\xd8s\xcf\xb75b\xd6\xe7{q\xc8=\x0e+\x9a\xd4\x89\x8ef\'\x80G\x1e\xc6\xad\xe8&\xe2F*}p\x07\xadu\xc7\xb1\xfa\xb1\xd5\xb4 \xc6\x1b\xf3\'\xb5d\xea\xb2#FJ\xe5\x90\x0e@5\xb6\x96\x8ea\x06f\xc7\x1d\rd_B\xab\xbb\r\xc7\xbdu(hs\xc9\x1c\x94\x84,\x8c\xd1\x92\x15\xba\x13\xfc\x8dkX\x15\xbe\xb4\xfb4\xca$\x8eO\x95\x94\xfa`\x8a\xafs\x08$\x93\xb4c\xd3\xbd%\x93,\x12\xa9\x07\t\xef\xda\xb8\xaaG\x95\x82I\xe8\xcf$\xf1\xd7\xc0k\x05\xf1E\xb4\xb6\x90\x94\x8d\x9cH\x15\xb9\x18\x03\x81E}\x03\x7fea\xab\xe9Q\xfd\xa0\xed\x9a"\nJ\x87\x91\xc8\xa2\xb9eWS\x95e\xf4$\xdb\xe5?5\xf5\xdf\x8a\xba\x91c\x1a\xb1\x0b\xd3\x83_j\xfe\xc3\xde+\xff\x00\x84\xc7\xe1\x0e\xb1e3\xef\x9a\xce\xf4\x16Rs\xb4:\xf0\x7f1_\x03\\X\x89[\x1bz\xf3_Q\xfe\xc07\x17\x9aw\x8f5\x8d$1\x8e\xd3S\xb4+\xb4\xe7\x06U\xe5:w\xea9\xf5\xae\xfaJ\tZ;\x9f\x9ce\x13T1P}\xf4>\x8d\xd5,I\xba\xb8\xb6a\xfb\xd8\xc9\xc6;\x8fZ\x9bC\xd4#\x822\xad\xb6)\xd3\xa99\'\xeb\x8aw\x8f \xbb\xb1\xd5\xcd\xc4Y\x0cWk(\xef\x8a\xe4\xf5;\xc9c\x81.A1\xbf<\x83\x9a\xb8\xc6\xea\xe7\xeb\x17\xb9\xddM\xe28T\x05\x0c\xf31\xe38\xc5b\xea:\xac\xbb\xc6#\xf9_\xb69\xaeB\x1f\x155\xcf\x96\xed!\x04zpkoM\xd7\xc5\xc4\xbb\r\xd6\x07\xa3\x1c\xd7Du\xdc\xcaP\xb1r\xda\x1b\x99\xd9\x80\x03\xa7\n\xdd\xea\x1b\xd6{^\xc5XuB?\xcek\xa6\x81`\x16\xe6G\x88Jz\x92\x9c\x11XZ\x8e\xa3m)d\\\x07\x1fwx#\x9fL\xff\x00\x8dy\xf8\x97m\x110\xd5\x8e\xd3\xae\xa4\x11\xe4\xe3\xc9nv\x1ev\x9f\xf0\xa2\xb2\x13P\x1fi\x04f7\x0c\x08\xc1\xc1\xf7\xfa\x8eh\xaf+s\xb4\xf8\x87K\xd2c\x99\x81u\xe6\xbd\x93\xe0\xce\xad7\x82\xfcC\r\xfd\xae\xd5u#\xb7J(\xafE>Y]\x1f\x83F\xa4\xa1$\xe2\xcf\xb4\xae\xed\xbf\xe1(\xf0\xf5\xa6\xad\x1cJ\x1eKs#\xb63\xceH\xaf\x1d\xf1M\xe41\xef\x86=\xaaS\x86S\xd0\xd1Ew\xad,\xcf\xd8pru)\xc6R\xde\xc8\xe0E\xcco+ \x93l\xaaq\x83\x9c\x1a\xeft}\x03:U\xb5\xf6\xc12\x16\xdb*\x07\x01\x94v8\xcd\x14V\xed\xd9\x1d\xb5\x1bV:d\xbb\x8e+fT\x98l\x03#;\xb7\x0f\xd3\x9a\xe4\xb5k\xc2$\x1b\xa6]\xc3\x80\xfbH\x04{\x9c\x7f:(\xaf&\xbb\xbb\xd4t\xf7)Aw1$K\x13:\x11\x80\xe0\xe4\x1f\xa1\xf5\xf6\xa2\x8a+\x8dE\x1b\x1f\xff\xd9\r\n------geckoformboundary5be43027cc2302278ce53c22c7486ff1--\r\n'

    request = Request(request_bytes)

    multi_response = parse_multipart(request)
    assert multi_response.boundary == "----geckoformboundary5be43027cc2302278ce53c22c7486ff1"
    assert len(multi_response.parts) == 2
    assert multi_response.parts[0].name == "description"
    assert multi_response.parts[0].headers["Content-Disposition"] == 'form-data; name="description"'
    assert multi_response.parts[0].content == b"Hi it's me."
    assert multi_response.parts[1].name == "uploaded-file"
    assert multi_response.parts[1].headers["Content-Disposition"] == 'form-data; name="uploaded-file"; filename="tiny_image.jpg"'
    assert multi_response.parts[1].headers["Content-Type"] == "image/jpeg"
    assert multi_response.parts[1].content == b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00x\x00x\x00\x00\xff\xdb\x00C\x00\x03\x02\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\n\x07\x07\x06\x08\x0c\n\x0c\x0c\x0b\n\x0b\x0b\r\x0e\x12\x10\r\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00C\x01\x03\x04\x04\x05\x04\x05\t\x05\x05\t\x14\r\x0b\r\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc0\x00\x11\x08\x00H\x00H\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1f\x00\x00\x01\x05\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x10\x00\x02\x01\x03\x03\x02\x04\x03\x05\x05\x04\x04\x00\x00\x01}\x01\x02\x03\x00\x04\x11\x05\x12!1A\x06\x13Qa\x07"q\x142\x81\x91\xa1\x08#B\xb1\xc1\x15R\xd1\xf0$3br\x82\t\n\x16\x17\x18\x19\x1a%&\'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xc4\x00\x1f\x01\x00\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\xff\xc4\x00\xb5\x11\x00\x02\x01\x02\x04\x04\x03\x04\x07\x05\x04\x04\x00\x01\x02w\x00\x01\x02\x03\x11\x04\x05!1\x06\x12AQ\x07aq\x13"2\x81\x08\x14B\x91\xa1\xb1\xc1\t#3R\xf0\x15br\xd1\n\x16$4\xe1%\xf1\x17\x18\x19\x1a&\'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x92\x93\x94\x95\x96\x97\x98\x99\x9a\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xf2\xad*v\x92\xe9T1\x19=\xab\xe9\xcf\x85z\'\x93\xe1\xb3\xa9\xeaR\x08\xe1\x1c)~\x0bz`u5\xf2\xc6\x88\xcc\xf7\xf1\x81\xc0\'\x02\xbe\xb2\xb0\xb4\x9f\xfe\x11_\x0f\xdaI\xb8\x8f#\xcc9>\xa4\xe3\xf4\xaf\xc9\xb0t\xd3\x93\xb9\xe5\xf0\xe6\x16\x9e"\xabu\x15\xecn?\x884\xb9\x90\xa2X\xb3\x7f\xc0\xbfZ~\x9a\xdaW\xdb\x12h\x8b!?x8\xe4\xfe5^\xdfFX\xb1\x95\xc7\xbdI-\x87\x97\xc0\\\x802\x0fz\xf6}\x92h\xfb\xea\xf9n\x16\xb2\xe5\x9c\x11\xdb_j\xd6gJ\x91P+\x1d\x9d}y5\xf2\x1f\xc5\xc9\x95\xb5\x99\x158\x1b\xb9\xaf\xa1\x04o</\x039L\xe7\x0c\x0fQ^\x1d\xf1C\xc2wq^\x97t\xc8nRA\xd1\xab\xcd\xadI\xc5;\x1f\x9d\xe6Y%L\x13u)\xeb\x0f\xcb\xd4\xf2[\x85f\\(\xac\xf1\xe0\xdb\x9dbPJ\x9d\x8d]\xbe\x83\xe1\xc7\xb9w3\xfc\xa0\x1e\x86\xbd\x1b\xc3\xdaM\xa41\x81\xb0q\x9eH\xa3\x0c\x9c=\xe3\xe6\xe2\xac\xeeyV\x95\xf0u\x9a \xd2\'\xcaGqE{D\xba\x9d\xad\x8c\'s\xa8\xf4\xcd\x15\xe89\xcd\xbb\x9b\xf33\xc6t\x9d\x0c\xf9\xd1>va\x81\x06\xbe\xb8\xb7\xb62\xdc\xd8\x05;\xe3[XUF{l\x19\xfdk\xc9\xbc\'\xe0\xf8\xee\xc0&<\x8fB+\xdeWO\x1ay\xd3F0\x16\xd61\x8flW6\x1a\x1c\xa9\x9fg\xc2\xb2J\xa5H\xf9 0\x0cm#\x91\xd7\xb5\x13\xd9\xa3.B\xfe\x15u\xc4l7\x0e\x87\xb3v\xa4HF\xd023\xf5\xafN\x0c\xfd\x0eh\xe7\xae\xec\x00\x04\xed\xc6{\xd6]\xfd\xad\xb5\xfd\xa3\xd8\xde x\xdb\xa3w\x07\xd4Wcwj\xa5H\'+\xdb\x02\xb9\xddB\xd4\xdb\x92pH\xeb\x93J\xa4\x132j3N\x13Z\x1e-\xe3o\x0bO\xe1H\x1a\xee5\x12[n\x1f:\x0e\x83\x9e\xb5\xe6z\xbf\xc4\xd5\xd2\xac\xa5)!\x0f\xb3?\x99\xaf\xa9\x99\xe1\xbc\xb6\x96\xca\xea\x05\x9a\xde@\x01\x0e3\x91_.\xfck\xfd\x9f\xf5\x1d\x16+\xab\xed&6\xbb\xb0\x95\x81DPKG\x8e\x80\xfb\x0c\x9a\xc2\x10\x8d\xec|.e\x92(7V\x86\xdd\x8f)\xd5\xfe(_\xdf\xef\xc4\x8c7p\x0eh\xaef\xe7K\x9d&\x86\x17\x88\xae\xd5\x00\xf1\xde\x8a\xebq\x8ct>Y\xd2\xe5v\xb1\xfa?\xe0-,E\x18\xde\xa0\x1cW\xa0x\x9e\xdc\xc64\xc9\xa3\x1f\xba\x16\xe1s\xeay\xaf\x1a\xb3\xf1\xfczt9.\xa3\x8e9\xafY\xd2\xb5h\xfcW\xf0\xdbL\xd4\xa2}\xdb$\x923\x83\x9c`\xd7\x9b\x86nw=\x8e\x17\x9b\x86.Q}Q\x996\xa2\x88\xd8s\xcf\xb75b\xd6\xe7{q\xc8=\x0e+\x9a\xd4\x89\x8ef\'\x80G\x1e\xc6\xad\xe8&\xe2F*}p\x07\xadu\xc7\xb1\xfa\xb1\xd5\xb4 \xc6\x1b\xf3\'\xb5d\xea\xb2#FJ\xe5\x90\x0e@5\xb6\x96\x8ea\x06f\xc7\x1d\rd_B\xab\xbb\r\xc7\xbdu(hs\xc9\x1c\x94\x84,\x8c\xd1\x92\x15\xba\x13\xfc\x8dkX\x15\xbe\xb4\xfb4\xca$\x8eO\x95\x94\xfa`\x8a\xafs\x08$\x93\xb4c\xd3\xbd%\x93,\x12\xa9\x07\t\xef\xda\xb8\xaaG\x95\x82I\xe8\xcf$\xf1\xd7\xc0k\x05\xf1E\xb4\xb6\x90\x94\x8d\x9cH\x15\xb9\x18\x03\x81E}\x03\x7fea\xab\xe9Q\xfd\xa0\xed\x9a"\nJ\x87\x91\xc8\xa2\xb9eWS\x95e\xf4$\xdb\xe5?5\xf5\xdf\x8a\xba\x91c\x1a\xb1\x0b\xd3\x83_j\xfe\xc3\xde+\xff\x00\x84\xc7\xe1\x0e\xb1e3\xef\x9a\xce\xf4\x16Rs\xb4:\xf0\x7f1_\x03\\X\x89[\x1bz\xf3_Q\xfe\xc07\x17\x9aw\x8f5\x8d$1\x8e\xd3S\xb4+\xb4\xe7\x06U\xe5:w\xea9\xf5\xae\xfaJ\tZ;\x9f\x9ce\x13T1P}\xf4>\x8d\xd5,I\xba\xb8\xb6a\xfb\xd8\xc9\xc6;\x8fZ\x9bC\xd4#\x822\xad\xb6)\xd3\xa99\'\xeb\x8aw\x8f \xbb\xb1\xd5\xcd\xc4Y\x0cWk(\xef\x8a\xe4\xf5;\xc9c\x81.A1\xbf<\x83\x9a\xb8\xc6\xea\xe7\xeb\x17\xb9\xddM\xe28T\x05\x0c\xf31\xe38\xc5b\xea:\xac\xbb\xc6#\xf9_\xb69\xaeB\x1f\x155\xcf\x96\xed!\x04zpkoM\xd7\xc5\xc4\xbb\r\xd6\x07\xa3\x1c\xd7Du\xdc\xcaP\xb1r\xda\x1b\x99\xd9\x80\x03\xa7\n\xdd\xea\x1b\xd6{^\xc5XuB?\xcek\xa6\x81`\x16\xe6G\x88Jz\x92\x9c\x11XZ\x8e\xa3m)d\\\x07\x1fwx#\x9fL\xff\x00\x8dy\xf8\x97m\x110\xd5\x8e\xd3\xae\xa4\x11\xe4\xe3\xc9nv\x1ev\x9f\xf0\xa2\xb2\x13P\x1fi\x04f7\x0c\x08\xc1\xc1\xf7\xfa\x8eh\xaf+s\xb4\xf8\x87K\xd2c\x99\x81u\xe6\xbd\x93\xe0\xce\xad7\x82\xfcC\r\xfd\xae\xd5u#\xb7J(\xafE>Y]\x1f\x83F\xa4\xa1$\xe2\xcf\xb4\xae\xed\xbf\xe1(\xf0\xf5\xa6\xad\x1cJ\x1eKs#\xb63\xceH\xaf\x1d\xf1M\xe41\xef\x86=\xaaS\x86S\xd0\xd1Ew\xad,\xcf\xd8pru)\xc6R\xde\xc8\xe0E\xcco+ \x93l\xaaq\x83\x9c\x1a\xeft}\x03:U\xb5\xf6\xc12\x16\xdb*\x07\x01\x94v8\xcd\x14V\xed\xd9\x1d\xb5\x1bV:d\xbb\x8e+fT\x98l\x03#;\xb7\x0f\xd3\x9a\xe4\xb5k\xc2$\x1b\xa6]\xc3\x80\xfbH\x04{\x9c\x7f:(\xaf&\xbb\xbb\xd4t\xf7)Aw1$K\x13:\x11\x80\xe0\xe4\x1f\xa1\xf5\xf6\xa2\x8a+\x8dE\x1b\x1f\xff\xd9'


    print("test1 passed")



if __name__ == "__main__":
    test1()